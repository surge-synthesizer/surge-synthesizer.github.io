---
import { Image } from "astro:assets";
import ThemeToggle from "./theme_toggle.astro";
import Logo from "../../public/images/sst-logo.svg";

const { toc } = Astro.props;
---

<nav
    class="sticky top-0 grid grid-flow-col place-content-center items-center gap-4 bg-surgeOrange p-1 font-semibold text-nowrap shadow-xl backdrop-blur-lg select-none print:hidden">
    <a href="https://surge-synth-team.org/" title="surge-synth-team.org">
        <Image
            class="m-0 min-h-[24px] min-w-[24px] p-0"
            alt="Surge Synth Team logo"
            title="surge-synth-team.org"
            src={Logo}
            width={24}
            height={24}
        /></a
    >

    <menu class="m-auto flex flex-row flex-wrap items-center gap-2 font-bold">
        <li><a class="category" href="/">Home</a></li>
        <li id="documentation-group" class="group">
            <span id="documentation-category" class="category">Documentation</span>
            <menu id="documentation" class="submenu">
                <div class="dropdown">
                    <li><a class="link" href="/manual-xt">Manual</a></li>
                    <li>
                        <a class="link" href="/rack_xt_manual">VCV Modules Manual</a>
                    </li>
                    <li>
                        <a class="link" href="/changelog">Changelog</a>
                    </li>
                    <li>
                        <a class="link" href="/accessibility">Accessibility</a>
                    </li>
                    <li>
                        <a class="link" href="/tuning-guide">Tuning Guide</a>
                    </li>
                </div>
            </menu>
        </li>
        <li id="extras-group" class="group">
            <span id="extras-category" class="category">Extras</span>
            <menu id="extras" class="submenu">
                <div class="dropdown">
                    <li>
                        <a class="link" href="/skin-library">Skin Library</a>
                    </li>
                    <li>
                        <a
                            class="link"
                            href="https://github.com/surge-synthesizer/surge-synthesizer.github.io/wiki"
                            >Wiki</a
                        >
                    </li>
                    <li>
                        <a class="link" href="/clap">About CLAP</a>
                    </li>
                </div>
            </menu>
        </li>
        <li id="about-group" class="group">
            <span id="about-category" class="category">About</span>
            <menu id="about" class="submenu">
                <div class="dropdown">
                    <li>
                        <a class="link" href="/reviews-media">Reviews & Media</a>
                    </li>
                    <li><a class="link" href="/about">History</a></li>
                    <li>
                        <a class="link" href="/feedback">Contact</a>
                    </li>
                    <li>
                        <a class="link" href="https://github.com/surge-synthesizer/surge"
                            >Source Code</a
                        >
                    </li>
                </div>
            </menu>
        </li>
        <li>
            <ThemeToggle />
        </li>
    </menu>

    {
        toc && (
            <a id="toc_toggle" class="toc-toggle">
                â‰¡
            </a>
        )
    }
</nav>

<script>
    function submenuHandlers(groupId: string, categoryId: string, submenuId: string) {
        const group = document.getElementById(groupId) as HTMLLIElement;
        const category = document.getElementById(categoryId) as HTMLMenuElement;
        const submenu = document.getElementById(submenuId) as HTMLMenuElement;

        if (window.matchMedia("(hover: hover)").matches) {
            group.addEventListener("mousemove", () => {
                submenu.style.display = "block";
                category.setAttribute("aria-expanded", "true");
            });

            group.addEventListener("mouseleave", () => {
                submenu.style.display = "none";
                category.setAttribute("aria-expanded", "false");
            });
        } else {
            category.addEventListener("click", () => {
                (() => {
                    const menus = [
                        document.getElementById("documentation") as HTMLMenuElement,
                        document.getElementById("extras") as HTMLMenuElement,
                        document.getElementById("about") as HTMLMenuElement,
                    ];

                    for (const menu of menus) {
                        if (menu.id !== submenu.id) {
                            menu.style.display = "none";
                        }
                    }
                })();

                if (getComputedStyle(submenu).getPropertyValue("display") === "none") {
                    submenu.style.display = "block";
                    category.setAttribute("aria-expanded", "false");
                } else {
                    submenu.style.display = "none";
                    category.setAttribute("aria-expanded", "false");
                }
            });
        }
    }

    submenuHandlers("documentation-group", "documentation-category", "documentation");
    submenuHandlers("extras-group", "extras-category", "extras");
    submenuHandlers("about-group", "about-category", "about");

    const tocToggle = document.getElementById("toc_toggle") as HTMLAnchorElement;
    const toc = document.getElementById("toc") as HTMLMenuElement;
    const mediaQuery = window.matchMedia("(max-width: 768px)");

    if (toc && tocToggle) {
        const tocAria = () => {
            if (window.getComputedStyle(toc).display !== "none") {
                toc.setAttribute("aria-expanded", "true");
            } else {
                toc.setAttribute("aria-expanded", "false");
            }
        };

        const hideToc = (e: MouseEvent) => {
            if (tocToggle.contains(e.target as Node)) {
                return;
            }

            if (mediaQuery.matches) {
                toc.style.display = "none";
            }

            tocAria();
        };

        tocToggle.addEventListener("mouseup", () => {
            if (window.getComputedStyle(toc).display === "none") {
                toc.style.display = "initial";
                tocAria();
                document.addEventListener("click", hideToc);
            } else {
                toc.style.display = "none";
                tocAria();
                document.removeEventListener("click", hideToc);
            }
        });

        mediaQuery.addEventListener("change", () => {
            tocAria();
        });

        tocAria();
    }
</script>
